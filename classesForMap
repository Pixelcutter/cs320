ACTIVECOLOR = pygame.Color('lightskyblue3') #sets the color of the active (selected) box
PASSIVECOLOR = pygame.Color('chartreuse4') #sets the color of the inactive boxes

class TextBox:
    def __init__(self, x, y, w, h, text=''):
        self.Rect = pygame.Rect(x, y, w, h)
        self.color = passiveColor
        self.text = text
        self.textSurface = baseFont.render(text, True, (255, 255, 255))
        self.active = False

    def eventHandler(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if textBox.collidepoint(event.pos):
                self.active = True
            else:
                self.active = False
            self.color = ACTIVECOLOR if self.active else PASSIVECOLOR

        if event.type == pg.KEYDOWN:
                if self.active:
                    elif event.key == pg.K_BACKSPACE:
                        self.text = self.text[:-1]
                    else:
                        self.text += event.unicode
                    # Re-render the text.
                    self.txt_surface = FONT.render(self.text, True, self.color)

    def update(self):
        self.w = max(100, textSurface.get_wdith()+10)

    def draw(self, screen):
        # Blit the text.
        screen.blit(self.txt_surface, (self.rect.x+5, self.rect.y+5))
        # Blit the rect.
        pg.draw.rect(screen, self.color, self.rect, 2)

class tileBox:
    def __init__(self, radius, x, y):
        self.x = x
        self.y = y
        self.xPoint = [0,0,0,0,0,0]
        self.yPoint = [0,0,0,0,0,0]
        self.traits = ['','','','','','']
        self.biome = ''
        self.active = False
        self.color = PASSIVECOLOR

    def handle_event(self, event):
        if event.type = pygame.MOUSEBUTTONDOWN:
            if self.polygon.collidepoint(event.pos):
                self.active = True
            else:
                self.active = False
            self.color = ACTIVECOLOR if self.active else PASSIVECOLOR

    def draw(self, screen, x, y):
        for i in range(6):
            self.xPoint[i] = x + radius * cos(2 * pi * i / 6)
            self.yPoint[i] = y + radius * sin(2 * pi * i / 6)
        pygame.draw.polygon(surface, color, [(xPoint[0],yPoint[0]),
            (xPoint[1],yPoint[1]),
            (xPoint[2],yPoint[2]),
            (xPoint[3],yPoint[3]),
            (xPoint[4],yPoint[4]),
            (xPoint[5],yPoint[5])], width = 1)

    #def assignTraits():
        #there's nothing here yet

class map:
    def __init__(self, width, height):
        self.tiles = []
        self.waterAmount = 0
        self.width = width
        self.height = height

    def drawMap(self, radius):
        x = radius
        y = radius
        for a in range(0, height):
            x = radius
            for i in range(0, width):
                #call hex class here
                x = radius*3 + x
                i = i + 1
            y = (radius*2 + y)-4
            a = a + 2
        #self.tiles[a] = the hex returned?
        #have to repeat above code to do the offset hexes
        y = radius*2 - 2
        for a in range(0, height):
            x = radius*2.5
            for i in range(0, width):
                #call hex class here
                x = radius*3 + x
                i = i + 1
            y = (radius*2 + y)-4
            a = a + 2
